type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    # Taken from mission Acceptable Password I

    def is_acceptable_password(password: str) -> bool:
        # your code here
        return len(password) > 6


    if __name__ == '__main__':
        print("Example:")
        print(is_acceptable_password('short'))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password('short') == False
        assert is_acceptable_password('muchlonger') == True
        assert is_acceptable_password('ashort') == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    def is_acceptable_password(password: str) -> bool:
        if len(password) < 6:
            return False

        for i in password:
            if i.isdigit():
                return True
        # your code here
        return False


    if __name__ == '__main__':
        print("Example:")
        print(is_acceptable_password('short'))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password('short') == False
        assert is_acceptable_password('muchlonger') == False
        assert is_acceptable_password('ashort') == False
        assert is_acceptable_password('muchlonger5') == True
        assert is_acceptable_password('sh5') == False
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  # Taken from mission Acceptable Password I

  def is_acceptable_password(password: str) -> bool:
      # your code here
      return len(password) > 6


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == True
      assert is_acceptable_password('ashort') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  def is_acceptable_password(password: str) -> bool:
      if len(password) < 6:
          return False

      for i in password:
          if i.isdigit():
              return True
      # your code here
      return False


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == False
      assert is_acceptable_password('ashort') == False
      assert is_acceptable_password('muchlonger5') == True
      assert is_acceptable_password('sh5') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 322230
