type: checkiO
files:
- name: mission.py
  visible: true
  text: "# Taken from mission Acceptable Password II\n\n# Taken from mission Acceptable\
    \ Password I\n\ndef is_acceptable_password(password: str) -> bool:\n    # your\
    \ code here\n    return len(password) > 6\n\n\nif __name__ == '__main__':\n  \
    \  print(\"Example:\")\n    print(is_acceptable_password('short'))\n\n    # These\
    \ \"asserts\" are used for self-checking and not for an auto-testing\n    assert\
    \ is_acceptable_password('short') == False\n    assert is_acceptable_password('muchlonger')\
    \ == True\n    assert is_acceptable_password('ashort') == False\n    print(\"\
    Coding complete? Click 'Check' to earn cool rewards!\")\n\n\ndef is_acceptable_password(password:\
    \ str) -> bool:\n    if len(password) < 6:\n        return False\n\n    for i\
    \ in password:\n        if i.isdigit():\n            return True\n    # your code\
    \ here\n    return False\n\n\nif __name__ == '__main__':\n    print(\"Example:\"\
    )\n    print(is_acceptable_password('short'))\n\n    # These \"asserts\" are used\
    \ for self-checking and not for an auto-testing\n    assert is_acceptable_password('short')\
    \ == False\n    assert is_acceptable_password('muchlonger') == False\n    assert\
    \ is_acceptable_password('ashort') == False\n    assert is_acceptable_password('muchlonger5')\
    \ == True\n    assert is_acceptable_password('sh5') == False\n    print(\"Coding\
    \ complete? Click 'Check' to earn cool rewards!\")\n\n\ndef is_acceptable_password(password:\
    \ str) -> bool:\r\n    # your code here\r\n    return False\r\n\r\n\r\nif __name__\
    \ == '__main__':\r\n    print(\"Example:\")\r\n    print(is_acceptable_password('short'))\r\
    \n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\
    \n    assert is_acceptable_password('short') == False\r\n    assert is_acceptable_password('muchlonger')\
    \ == False\r\n    assert is_acceptable_password('ashort') == False\r\n    assert\
    \ is_acceptable_password('muchlonger5') == True\r\n    assert is_acceptable_password('sh5')\
    \ == False\r\n    assert is_acceptable_password('1234567') == False\r\n    print(\"\
    Coding complete? Click 'Check' to earn cool rewards!\")"
  learner_created: false
status: Solved
code: |-
  # Taken from mission Acceptable Password II

  # Taken from mission Acceptable Password I

  def is_acceptable_password(password: str) -> bool:
      # your code here
      return len(password) > 6


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == True
      assert is_acceptable_password('ashort') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  def is_acceptable_password(password: str) -> bool:
      if len(password) < 6:
          return False

      for i in password:
          if i.isdigit():
              return True
      # your code here
      return False


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == False
      assert is_acceptable_password('ashort') == False
      assert is_acceptable_password('muchlonger5') == True
      assert is_acceptable_password('sh5') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  def is_acceptable_password(password: str) -> bool:
      if len(password) < 6 or password.isdigit():
          return False

      for i in password:
          if i.isdigit():
              return True
      # your code here
      return False


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == False
      assert is_acceptable_password('ashort') == False
      assert is_acceptable_password('muchlonger5') == True
      assert is_acceptable_password('sh5') == False
      assert is_acceptable_password('1234567') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 87620
