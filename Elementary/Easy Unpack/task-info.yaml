type: checkiO
files:
- name: mission.py
  visible: true
  text: "def easy_unpack(elements: tuple) -> tuple:\n    \"\"\"\n        returns a\
    \ tuple with 3 elements - first, third and second to the last\n    \"\"\"\n  \
    \  # your code here\n    # tuple(elements[0]) + tuple(elements[2]) + tuple(elements[-2])\n\
    \    res = [elements[0], elements[2], elements[-2]]\n    \n    return tuple(res)\n\
    \nif __name__ == '__main__':\n    print('Examples:')\n    print(easy_unpack((1,\
    \ 2, 3, 4, 5, 6, 7, 9)))\n    \n    #These \"asserts\" using only for self-checking\
    \ and not necessary for auto-testing\n    assert easy_unpack((1, 2, 3, 4, 5, 6,\
    \ 7, 9)) == (1, 3, 7)\n    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)\n   \
    \ assert easy_unpack((6, 3, 7)) == (6, 7, 3)\n    print('Done! Go Check!')\n"
  learner_created: false
status: Solved
code: "def easy_unpack(elements: tuple) -> tuple:\n    \"\"\"\n        returns a tuple\
  \ with 3 elements - first, third and second to the last\n    \"\"\"\n    # your\
  \ code here\n    # tuple(elements[0]) + tuple(elements[2]) + tuple(elements[-2])\n\
  \    res = [elements[0], elements[2], elements[-2]]\n    \n    return tuple(res)\n\
  \nif __name__ == '__main__':\n    print('Examples:')\n    print(easy_unpack((1,\
  \ 2, 3, 4, 5, 6, 7, 9)))\n    \n    #These \"asserts\" using only for self-checking\
  \ and not necessary for auto-testing\n    assert easy_unpack((1, 2, 3, 4, 5, 6,\
  \ 7, 9)) == (1, 3, 7)\n    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)\n    assert\
  \ easy_unpack((6, 3, 7)) == (6, 7, 3)\n    print('Done! Go Check!')\n"
seconds_from_change: 25278580
