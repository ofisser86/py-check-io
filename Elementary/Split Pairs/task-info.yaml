type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    import textwrap

    def split_pairs(a):
        wrapper = textwrap.TextWrapper(width=2)
        string = wrapper.fill(text=a)
        res = string.split()
        if len(a) % 2 != 0:
            res[-1] = res[-1] + '_'
        print(res)
        return res


    if __name__ == '__main__':
        print("Example:")
        print(list(split_pairs('a')))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert list(split_pairs('abcd')) == ['ab', 'cd']
        assert list(split_pairs('abc')) == ['ab', 'c_']
        assert list(split_pairs('abcdf')) == ['ab', 'cd', 'f_']
        assert list(split_pairs('a')) == ['a_']
        assert list(split_pairs('')) == []
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  import textwrap

  def split_pairs(a):
      wrapper = textwrap.TextWrapper(width=2)
      string = wrapper.fill(text=a)
      res = string.split()
      if len(a) % 2 != 0:
          res[-1] = res[-1] + '_'
      print(res)
      return res


  if __name__ == '__main__':
      print("Example:")
      print(list(split_pairs('a')))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert list(split_pairs('abcd')) == ['ab', 'cd']
      assert list(split_pairs('abc')) == ['ab', 'c_']
      assert list(split_pairs('abcdf')) == ['ab', 'cd', 'f_']
      assert list(split_pairs('a')) == ['a_']
      assert list(split_pairs('')) == []
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 1037687
